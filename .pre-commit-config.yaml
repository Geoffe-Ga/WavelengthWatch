repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        name: ruff (backend & tests)
        pass_filenames: false
        args: [--fix, --exit-non-zero-on-fix, backend, tests/backend]
      - id: ruff-format
        name: ruff-format (backend & tests)
        pass_filenames: false
        args: [backend, tests/backend]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.2
    hooks:
      - id: mypy
        name: mypy (backend package)
        pass_filenames: false
        args: [--config-file, mypy.ini, backend]
        additional_dependencies:
          - "pydantic"
          - "types-requests"
          - "sqlalchemy>2.0"
          - "pydantic[mypy]"
          - "sqlmodel>=0.0.24"

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-yaml
      - id: check-json
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: detect-private-key

  - repo: local
    hooks:
      - id: swiftformat
        name: SwiftFormat
        entry: swiftformat
        language: system
        types_or: [swift]
        args: [--lint]
      - id: backend-tests
        name: backend tests (on push)
        entry: bash
        language: system
        pass_filenames: false
        files: ^(backend/|tests/backend/)
        stages: [pre-push]
        args:
          - -lc
          - |
            set -euo pipefail
            if [ ! -d ".venv" ]; then python3 -m venv .venv; fi
            source .venv/bin/activate
            python -m pip install --upgrade pip
            pip install -r backend/requirements.txt
            if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; fi
            pytest -q
      - id: watchos-xcodebuild
        name: watchOS app build (on push)
        entry: bash
        language: system
        pass_filenames: false
        stages: [pre-push]
        args:
          - -lc
          - |
            set -euo pipefail

            SCHEME="WavelengthWatch Watch App"
            CONFIGURATION="Debug"
            DESTINATION="generic/platform=watchOS Simulator"

            echo "Building ${SCHEME}..."
            xcodebuild -scheme "${SCHEME}" -configuration "${CONFIGURATION}" -destination "${DESTINATION}" build

            echo "Inspecting build settings to locate Info.plist..."
            BUILD_SETTINGS=$(xcodebuild -scheme "${SCHEME}" -configuration "${CONFIGURATION}" -destination "${DESTINATION}" -showBuildSettings)

            TARGET_BUILD_DIR=$(printf "%s\n" "${BUILD_SETTINGS}" | awk -F ' = ' '/ TARGET_BUILD_DIR / {print $2; exit}')
            INFOPLIST_PATH=$(printf "%s\n" "${BUILD_SETTINGS}" | awk -F ' = ' '/ INFOPLIST_PATH / {print $2; exit}')

            if [ -z "${TARGET_BUILD_DIR}" ] || [ -z "${INFOPLIST_PATH}" ]; then
              echo "Unable to determine Info.plist path from xcodebuild output." >&2
              exit 1
            fi

            FULL_PLIST_PATH="${TARGET_BUILD_DIR}/${INFOPLIST_PATH}"

            if [ ! -f "${FULL_PLIST_PATH}" ]; then
              echo "Info.plist not found at ${FULL_PLIST_PATH}." >&2
              exit 1
            fi

            echo "Validating API_BASE_URL in ${FULL_PLIST_PATH}..."
            API_BASE_URL=$(plutil -extract API_BASE_URL raw -o - "${FULL_PLIST_PATH}" 2>/dev/null || true)

            if [ -z "${API_BASE_URL}" ]; then
              echo "API_BASE_URL is missing from ${FULL_PLIST_PATH}." >&2
              exit 1
            fi

            if printf "%s" "${API_BASE_URL}" | grep -qi "placeholder"; then
              echo "API_BASE_URL is still using a placeholder value: ${API_BASE_URL}" >&2
              exit 1
            fi

            echo "API_BASE_URL is set to ${API_BASE_URL}"
